const i=self,c="gc-v1",o=["/","/index.html","/manifest.webmanifest"];i.addEventListener("install",n=>{i.skipWaiting(),n.waitUntil(caches.open(c).then(t=>t.addAll(o)))});i.addEventListener("activate",n=>{n.waitUntil(caches.keys().then(t=>Promise.all(t.filter(s=>s!==c).map(s=>caches.delete(s)))).then(()=>i.clients.claim()))});i.addEventListener("fetch",n=>{const{request:t}=n;if(t.method!=="GET")return;const s=new URL(t.url);if(t.mode==="navigate"){n.respondWith((async()=>{const a=await caches.open(c);try{const e=await fetch(t);return a.put("/index.html",e.clone()),e}catch{const e=await a.match("/index.html");if(e)return e;throw new Error("Offline")}})());return}if(s.pathname.startsWith("/assets/")&&t.destination==="image"){n.respondWith(caches.open(c).then(async a=>{const e=await a.match(t);if(e)return e;try{const r=await fetch(t);return a.put(t,r.clone()),r}catch{return new Response(null,{status:404,statusText:"Not Found"})}}));return}t.url.endsWith(".json")&&n.respondWith((async()=>{const a=await caches.open(c);try{const e=await fetch(t);return a.put(t,e.clone()),e}catch{const e=await a.match(t);if(e)return e;throw new Error("Offline")}})())});
